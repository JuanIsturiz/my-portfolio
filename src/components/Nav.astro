---
import download from "../assets/arrow-down-to-line.svg";
import ToggleTheme from "./ToggleTheme.astro";

const navLinks = [
  { label: "About", section: "about" },
  { label: "Stack", section: "stack" },
  { label: "Projects", section: "projects" },
  { label: "Contact", section: "contact" },
];
---

<style>
  @media (max-height: 425px) and (orientation: landscape) {
    .small-nav {
      gap: 18px !important;
    }
  }
  .parent:hover img {
    animation: download-bounce 1500ms linear infinite;
  }

  .open-nav-slide {
    animation: open-nav-slide 500ms ease;
  }

  @keyframes open-nav-slide {
    0% {
      transform: translateX(0px);
    }
    50% {
      transform: translateX(10px);
    }
    100% {
      transform: translateX(0px);
    }
  }
  @keyframes download-bounce {
    0% {
      transform: translateY(0);
    }
    25% {
      transform: translateY(1.5px);
    }
    50% {
      transform: translateY(0);
    }
    75% {
      transform: translateY(-1.5px);
    }
    100% {
      transform: translateY(0);
    }
  }
</style>

<header
  class="intro-fade fixed lg:absolute left-0 top-0 z-[90] lg:z-20 flex justify-between items-center w-full border-b bg-white py-1 px-4 dark:bg-zinc-950 dark:border-b-zinc-700"
>
  <a href="/files/CV-ENG.pdf" download="CV-ENG.pdf" aria-label="Download CV">
    <button
      class="parent flex items-center gap-1 text-sm md:text-base lg:text-lg bg-black text-white py-1 px-2 rounded-sm dark:bg-white dark:text-black"
    >
      <p class="tracking-tighter dark:font-medium">Download CV</p>
      <img
        src={download.src}
        alt="Download icon"
        class="invert hidden w-5 lg:block dark:invert-0"
      />
    </button>
  </a>

  <!-- nav -->
  <div
    class="relative z-[100] cursor-pointer space-y-1 lg:hidden"
    id="hamburger"
  >
    <div class="bar w-6 h-0.5 bg-black transition-all dark:bg-white"></div>
    <div class="bar w-6 h-0.5 bg-black transition-all dark:bg-white"></div>
    <div class="bar w-6 h-0.5 bg-black transition-all dark:bg-white"></div>
  </div>
  <!-- small nav -->
  <nav
    id="small-nav"
    class="small-nav pointer-events-none fixed right-0 top-0 z-[90] w-full flex flex-col items-center gap-14 bg-white bg-[url('/img/contact-bg.svg')] bg-cover place-content-center h-screen opacity-0 transition-all overflow-hidden dark:bg-zinc-950"
  >
    <div class="absolute top-2 left-2">
      <ToggleTheme />
    </div>
    {
      [{ label: "Home", section: "hero" }, ...navLinks].map((link) => (
        <a
          href={`#${link.section}`}
          class={
            "w-full nav-link py-1.5 px-2 transition-all duration-200 tracking-tighter hover:bg-zinc-950 hover:text-white text-2xl text-center dark:text-white dark:hover:bg-white dark:hover:text-black"
          }
        >
          {link.label}
        </a>
      ))
    }
  </nav>
  <!-- large nav -->
  <nav class="hidden lg:flex text-lg items-center gap-2">
    {
      navLinks.map((link) => (
        <a
          href={`#${link.section}`}
          class="py-1.5 px-2 rounded-sm transition-all duration-200 font-medium hover:bg-gray-900 hover:text-white dark:text-white dark:hover:bg-gray-100 dark:hover:text-black"
        >
          {link.label}
        </a>
      ))
    }
    <ToggleTheme />
  </nav>
</header>

<script>
  let open = false;
  const hamburger = document.getElementById("hamburger") as HTMLElement;
  const smallNav = document.getElementById("small-nav") as HTMLElement;

  const [topBar, midBar, bottomBar] = Array.from(
    document.querySelectorAll(".bar")
  ).map((elem) => elem as HTMLElement);

  const navLinks = Array.from(document.querySelectorAll(".nav-link")).map(
    (elem) => elem as HTMLElement
  );

  function applyOpenNavStyles() {
    topBar.style.transform = "rotate(45deg) translateX(6px) translateY(6px)";
    topBar.style.width = "28px";
    midBar.style.opacity = "0";
    bottomBar.style.transform =
      "rotate(-45deg) translateX(2px) translateY(-2px)";
    bottomBar.style.width = "28px";
    hamburger.style.transform = "translateX(3px)";
    hamburger.style.marginTop = "0.5rem";
    hamburger.style.height = "18px";
    document.body.style.overflow = "hidden";
    smallNav.style.opacity = "100";
    smallNav.style.pointerEvents = "auto";
  }

  function applyClosedNavStyles() {
    topBar.style.transform = "rotate(0deg) translateX(0px) translateY(0px)";
    topBar.style.width = "24px";
    midBar.style.opacity = "100";
    bottomBar.style.transform = "rotate(0deg) translateX(0px) translateY(0px)";
    bottomBar.style.width = "24px";
    hamburger.style.transform = "translateX(0)";
    hamburger.style.marginTop = "0rem";
    hamburger.style.height = "auto";
    document.body.style.overflow = "auto";
    smallNav.style.opacity = "0";
    smallNav.style.pointerEvents = "none";
  }

  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      open = false;
      navLinks.map((l) => l.classList.remove("open-nav-slide"));
      applyClosedNavStyles();
    });
  });

  hamburger.onclick = () => {
    open = !open;
    navLinks.forEach((link, idx) => {
      link.classList.toggle("open-nav-slide");
      link.style.animationDelay = `${idx * 100}ms`;
    });
    if (open) {
      applyOpenNavStyles();
    } else {
      applyClosedNavStyles();
    }
  };
</script>
